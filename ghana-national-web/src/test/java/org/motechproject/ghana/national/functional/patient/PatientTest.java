package org.motechproject.ghana.national.functional.patient;

import org.junit.runner.RunWith;
import org.motechproject.functional.data.TestPatient;
import org.motechproject.functional.data.TestStaff;
import org.motechproject.functional.mobileforms.MobileForm;
import org.motechproject.functional.pages.patient.PatientPage;
import org.motechproject.functional.pages.patient.SearchPatientPage;
import org.motechproject.functional.pages.staff.StaffPage;
import org.motechproject.functional.util.DataGenerator;
import org.motechproject.ghana.national.functional.LoggedInUserFunctionalTest;
import org.motechproject.ghana.national.service.IdentifierGenerationService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;
import org.testng.annotations.BeforeMethod;
import org.testng.annotations.Test;

@RunWith(SpringJUnit4ClassRunner.class)
@ContextConfiguration(locations = {"classpath:/applicationContext-functional-tests.xml"})
public class PatientTest extends LoggedInUserFunctionalTest {
    @Autowired
    private IdentifierGenerationService identifierGenerationService;
    private DataGenerator dataGenerator;

    @BeforeMethod
    public void setUp() {
        dataGenerator = new DataGenerator();
    }

    @Test
    public void shouldCreateAPatientWithAutoGeneratedIdAndSearchForHerByName() {
        PatientPage patientPage = browser.toCreatePatient(homePage);

        TestPatient patient = TestPatient.with("First Name" + dataGenerator.randomString(5)).
                registrationMode(TestPatient.PATIENT_REGN_MODE.AUTO_GENERATE_ID).
                patientType(TestPatient.PATIENT_TYPE.PATIENT_MOTHER).estimatedDateOfBirth(false);
        patientPage.create(patient);
        SearchPatientPage searchPatientPage = browser.toSearchPatient(patientPage);
        searchPatientPage.search(patient.firstName());
        searchPatientPage.displaying(patient);

        searchPatientPage.search("Middle");
        searchPatientPage.displaying(patient);

        searchPatientPage.search("Las");
        searchPatientPage.displaying(patient);
    }

    @Test
    public void shouldCreateAPatientWithMobileDeviceAndSearchForHerByName(){
        DataGenerator dataGenerator = new DataGenerator();
        String firstName = "First Name" + dataGenerator.randomString(5);

        StaffPage staffPage = browser.toStaffCreatePage(homePage);
        staffPage.create(TestStaff.with(firstName));

        TestPatient patient = TestPatient.with("First Name" + dataGenerator.randomString(5)).
                registrationMode(TestPatient.PATIENT_REGN_MODE.AUTO_GENERATE_ID).
                patientType(TestPatient.PATIENT_TYPE.OTHER).estimatedDateOfBirth(false).
                staffId(staffPage.staffId());

        mobile.upload(MobileForm.registerClientForm(), patient.forMobile());

        SearchPatientPage searchPatientPage = browser.toSearchPatient();
        searchPatientPage.search(patient.firstName());
        searchPatientPage.displaying(patient);
    }

    @Test
    public void shouldCreateAPatientWithPrePrintedIdAndSearchForHerByMotechId() {
        PatientPage patientPage = browser.toCreatePatient(homePage);

        TestPatient patient = TestPatient.with("First Name" + dataGenerator.randomString(5)).
                registrationMode(TestPatient.PATIENT_REGN_MODE.USE_PREPRINTED_ID).
                patientType(TestPatient.PATIENT_TYPE.CHILD_UNDER_FIVE).estimatedDateOfBirth(false).
                motechId(identifierGenerationService.newPatientId());
        patientPage.create(patient);
        SearchPatientPage searchPatientPage = browser.toSearchPatient(patientPage);
        searchPatientPage.searchWithMotechId(patient.motechId());
        searchPatientPage.displaying(patient);
    }
}
